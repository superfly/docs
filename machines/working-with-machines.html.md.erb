---
title: Working with the Machines API
objective: Get familiar with the Fly Machines API.
layout: framework_docs
order: 1
---

This document covers usage of the Machines REST API to start, stop, update and interact with machines. For the impatient, [flyctl also provides commands](https://fly.io/docs/flyctl/machine/) for experimenting with the API.

See all possible machine states [in the table below](#machine-states).

## Connecting to the API

The Machines API endpoint requires a connection to your Fly private network - either by running on a VM inside the network, or via a WireGuard VPN, or using `flyctl proxy`.

This guide assumes that you have `flyctl` and `curl` installed, and have authenticated to the Fly.io platform.

### Connecting via WireGuard

This method requires more setup but gives you direct access to machines over the Wireguard VPN.

First, follow the [instructions](/docs/reference/private-networking/#private-network-vpn) to set up a permanent WireGuard connection to your Fly network. We recommend WireGuard because you can directly test your machines from your local machine.

Once you're connected, Fly internal DNS should expose the Machines API endpoint at: `http://_api.internal:4280`

### Connecting via `flyctl proxy`

For quick testing of this API, you can proxy a local port to the internal API endpoint. Pick any organization when asked.

```cmd
flyctl machines api-proxy
```

With the above command running, in a separate terminal, try this to confirm you can access the API:

```cmd
curl http://127.0.0.1:4280
```

If you successfully reach the API, it should respond with a `404 page not found` error. That's because this was not a defined endpoint.

### Setting up the environment

If you are using a Wireguard VPN or a `flyctl` proxy,
set these environment variables to make the following commands easier to use.

```bash
$ export FLY_API_HOSTNAME="_api.internal:4280" # or set to `127.0.0.1:4280` when using 'flyctl proxy'
$ export FLY_API_TOKEN=$(fly auth token)
```

In order to access this API on a fly VM, make the token available as a secret:

```cmd
flyctl secrets set FLY_API_TOKEN=$(fly auth token)
```

A convenient way to set the `FLY_API_HOSTNAME` is to add it to your `Dockerfile`:

```
ENV FLY_API_HOSTNAME="_api.internal:4280
```


You'll still need to replace the application name and machine ID for commands to work.

### Authentication

All requests must include the the fly API Token in the HTTP Headers as follows:

```
Authorization: Bearer <fly_api_token>
```

### Create a Fly application

Machines must be associated with a Fly application. App names must be unique.

<%= partial "/docs/reference/machines/create_app_req" %>

### Allocate an IP address for global request routing

If you intend for machines to be accessible to the internet, you'll need to allocate an IP address to the application. Currently
this is done using `flyctl` or the [Fly GraphQL API](https://api.fly.io/graphql). This offers your app automatic, global routing via [Anycast](https://fly.io/docs/reference/services/#anycast). Read more about this in [the Networking section](https://fly.io/docs/reference/services/#notes-on-networking).

Example:

```cmd
flyctl ips allocate-v4 -a user-functions
```
```out
TYPE ADDRESS    REGION CREATED AT
v4   37.16.9.52 global 7s ago
```

The app will answer on this IP address, and after a small delay, at `user-functions.fly.dev`.

### Get application details

Get details about an application, like its organization slug and name. Also, to check if the app exists!
<%= partial "/docs/reference/machines/get_app_req" %>
<%= partial "/docs/reference/machines/get_app_resp" %>

### Set application secrets

For sensitive environment variables, such as credentials, you can set [secrets](https://fly.io/docs/reference/secrets/) as you would for standard Fly apps using `flyctl`:

<%= partial "/docs/partials/set_secrets", locals: { app_name: "user-functions" } %>

Machines inherit secrets from the app. Existing machines must be [updated](#update-a-machine) to pick up secrets set after the machine was created.

For non-sensitive information, you _can_ set different environment variables per machine at creation time.

### Create a machine

Create machine, which starts running immediately. This is where you configure the machine characteristics, like its CPU and memory. You can also allow connections from the internet through the Fly proxy. Learn more about this behavior in the [networking section](#networking).

Following this call, you can make a [blocking API request](#wait-for-a-machine-to-reach-a-specified-state) to wait for a machine to start.

The only required parameter is `image` in the `config` object. Other parameters:

`name`: Unique name for this machine. If omitted, one is generated for you.

`region`: The target region. Omitting this param launches in the same region as your WireGuard peer connection (somewhere near you).

`config`: An object defining the machine configuration. Options

* `image`: The Docker image to run
* `guest`: An object with the following options:
  - `cpus`: Number of vCPUs (default 1)
  - `memory_mb`: Memory in megabytes as multiples of 256 (default 256)
  - `kernel_args`: Optional array of strings. Arguments passed to the kernel

* `size`: A [named size](/docs/about/pricing/#machines) for the VM, e.g. `performance-2x` or `shared-cpu-2x`. Note: `guest` and `size` are mutually exclusive.
* `env`: An object filled with key/value pairs to be set as environment variables
* `services`: An array of objects that define a single network service. Check the [machines networking section](#networking) for more information. Options:

  - `protocol`: `tcp` or `udp`. [Learn more about running raw TCP/UDP services](https://fly.io/docs/app-guides/udp-and-tcp/).
  - `concurrency`: load balancing concurrency settings
      + `type`: `connections` (TCP) or `requests` (HTTP). Defaults to connections.
      + `soft_limit`: "ideal" service concurrency. We will attempt to spread load to keep services at or below this limit
      + `hard_limit`: maximum allowed concurrency. We will queue or reject when a service is at this limit
  - `internal_port`: Port the machine VM listens on
  - `ports`: An array of objects defining the service's ports and associated handlers. Options:
      + `port`: Public-facing port number
      + `handlers`: Array of [connection handlers](https://fly.io/docs/reference/services/#connection-handlers) for TCP-based services.

* `processes`: An optional array of objects defining multiple processes to run within a VM. The Machine will stop if *any* process exits without error.
  - `name`: Process name
  - `entrypoint`: An array of strings. The process that will run
  - `cmd`: An array of strings. The arguments passed to the entrypoint
  - `env`: An object filled with key/value pairs to be set as environment variables
  - `user`: An optional user that the process runs under

* `schedule`: Optionally one of `hourly`, `daily`, `weekly`, `monthly`. Runs machine at the given interval. Interval starts at time of machine creation

* `mounts`: An array of objects that reference previously created [persistent volumes](https://fly.io/docs/reference/volumes/). Currently, you may only mount *one volume* per VM.
  - `volume`: The volume ID, visible in `fly volumes list`, i.e. `vol_2n0l3vl60qpv635d`
  - `path`: Absolute path on the VM where the volume should be mounted. i.e. `/data`

* `checks`: An optional object that defines one or more named checks
  - the key for each check is the check name
  - the value for each check supports:
      + `type`: `tcp` or `http`
      + `port`: The port to connect to, likely should be the same as `internal_port`
      + `interval`: The time between connectivity checks
      + `timeout`: The maximum time a connection can take before being reported as failing its healthcheck
      + `method`: For http checks, the HTTP method to use to when making the request
      + `path`: For http checks, the path to send the request to
      + `protocol`: For http checks, whether to use `http` or `https`
      + `tls_skip_verify`: For http checks with https protocol, whether or not to verify the TLS certificate
      + `headers`: For http checks, an array of objects with string field `name` and array of strings vield `values`

An example of two checks:

```json
        "checks": {
            "tcp-alive": {
                "type": "tcp",
                "port": 8080,
                "interval": "15s",
                "timeout": "10s"
            },
            "http-get": {
                "type": "http",
                "port": 8080,
                "protocol": "http"
                "method": "GET",
                "path": "/",
                "interval": "15s",
                "timeout": "10s"
            }
        }
```

Example create machine request and response:

<%= partial "/docs/reference/machines/launch_req" %>
<%= partial "/docs/reference/machines/launch_resp" %>

### Wait for a machine to reach a Specified State

Wait for a machine to reach a specific state. Specify the desired state with the `state` parameter.  See the [table below](#machine-states) for a list of possible states.  The default for this parameter is `started`.

This request will block for up to 60 seconds. Set a longer timeout with the `timeout` parameter.


<%= partial "/docs/reference/machines/wait_req" %>
<%= partial "/docs/reference/machines/wait_resp" %>

### Get a Machine

Given a machine ID, fetch details about it.

<%= partial "/docs/reference/machines/get_req" %>
<%= partial "/docs/reference/machines/get_resp" %>

### Update a Machine

`region` and `name` are immutable and cannot be updated. **We don't support partial updates, you're required to specify the entire config**.

<%= partial "/docs/reference/machines/update_req" %>
<%= partial "/docs/reference/machines/update_resp" %>

### Stop a Machine

Stopping a machine will shut down the VM, but not destroy it. The VM may be started again with `machines/<id>/start`.

<%= partial "/docs/reference/machines/stop_req" %>
<%= partial "/docs/reference/machines/stop_resp" %>

### Start a Machine

Start a previously stopped machine.  Machines that are restarted are completely
reset to their original state so that they start clean on the next run.

<%= partial "/docs/reference/machines/start_req" %>
<%= partial "/docs/reference/machines/start_resp" %>

### Delete a Machine permanently

Delete a machine, never to be seen again. This action cannot be undone!

<%= partial "/docs/reference/machines/delete_req" %>
<%= partial "/docs/reference/machines/delete_resp" %>

### List machines for an app

<%= partial "/docs/reference/machines/list_req" %>
<%= partial "/docs/reference/machines/list_resp" %>

### Delete a Fly application

Machines should be stopped before attempting deletion. Pass `force=true` to stop and delete immediately.

<%= partial "/docs/reference/machines/delete_app" %>

### Lease a machine

Machine leases can be used to obtain an exclusive lock on modifying a machine.

<%= partial "/docs/reference/machines/lease_req" %>
<%= partial "/docs/reference/machines/lease_resp" %>
<%= partial "/docs/reference/machines/lease" %>

## Notes on Networking

Machines are closed to the public internet by default. To make them accessible via the associated application, you need to:

* Allocate an IP address to the application
* Adding one or more `services` to the machine config with ports and handlers, as seen in the launch example here

For an application with a single machine, all requests will be routed to that machine. A machine in the `stopped` state will be started up
automatically when a request arrives.

For an application with multiple machines *with the same configuration*, requests will be distributed across them. Warm-start behavior in this situation
is not well-defined now, so should not be relied upon for apps with multiple machines.

Requests to machines with *mixed* configurations will be distributed across machines whos configurations match the request.
For example, if 3 out of 6 machines have service configurations set to listen on port 80, requests to port 80 will be distributed amongst those 3.

### Reaching Machines

Machines can be reached within the private network by hostname in the format `<id>.vm.<app-name>.internal`. For example: `3d8d413b29d089.vm.user-functions.internal`.

## Machine States

This table explains the possible machine states. A machine may only be in one state at a time.

<table class="table-stripe table-stretch table-pad text-lg whitespace-nowrap m-0">
  <tbody>
    <tr>
      <td class="font-bold">created</td>
      <td>Initial status</td>
    </tr>
    <tr>
      <td class="font-bold">starting</td>
      <td>Transitioning from `stopped` to `started`</td>
    </tr>
    <tr>
      <td class="font-bold">started</td>
      <td>Running and network-accessible</td>
    </tr>
    <tr>
      <td class="font-bold">stopping</td>
      <td>Transitioning from `started` to `stopped`</td>
    </tr>
    <tr>
      <td class="font-bold">stopped</td>
      <td>Exited, either on its own or explicitly stopped</td>
    </tr>
    <tr>
      <td class="font-bold">replacing</td>
      <td>User-initiated configuration change (image, VM size, etc.) in progress</td>
    </tr>
    <tr>
      <td class="font-bold">destroying</td>
      <td>User asked for the machine to be completely removed</td>
    </tr>
    <tr>
      <td class="font-bold">destroyed</td>
      <td>No longer exists</td>
    </tr>
    </tbody>
  </table>


Internal note: the replaced state is only possible when requesting a specific `instance_id`.
