---
title: Beyond "hello fly"
layout: docs
nav: demo
toc: true
order: 1
---

Our deep dive assumes that you're not satisfied by a `hello fly`, or even a `hello fly` with a database application. You know that a real-world application has at a minimum the following components:

* An HTML form and a database; typically a relational database.
* The ability to handle media files or documents, generally using S3.
* A multi-user and realtime component, where changes made by one person in one location are reflected instantly in the browser of another person.

To get a fully-functional app running smoothly, you need a whole bunch of things; things like Anycast routing, load balancers, DNS certificates, WebSockets, an internal private network, a relational database, an object store, and an in-memory database. And the knowledge to to connect them all together.

We take a lot of this work off your plate with our [Fly Proxy routing](/docs/reference/fly-proxy/) and out-of-the-box [private networking](/docs/networking/private-networking/).

Usually, set up for a complete app typically takes a _minimum_ of an afternoon's worth of work, even by experts familiar with their target platform. With emphasis on the word _minimum_ as there is almost always a surprise, and often several. We can't promise no surprises, but we can show you how we'll partner with you to handle some of the dev ops complexities of working in a public cloud.

## So what is this deep dive demo app?

The deep dive demo uses industry standard components that you can run on your laptop, a VPS, AWS EC2, Google Compute Engine, or Azure.

### Web Dictaphone -- Fly.io edition

The deep dive demo is based on [MDN's Web Dictaphone](https://github.com/mdn/dom-examples/tree/main/media/web-dictaphone+external).
You can play with a [live demo hosted on GitHub](https://mdn.github.io/dom-examples/media/web-dictaphone/+external). The Web Dictaphone app is about as basic of an HTML form as you can get, and it has the added bonus of providing the ability to generate as many media files as you want using only your voice.

The basic Web Dictaphone is client side only, requiring a web server that can deploy static assets (HTML, CSS, JS, images), like NGINX, Apache HTTPd, or Caddy. Storing the data in databases for our deep dive demo requires a server that can handle HTTP GET, POST, PUT, and DELETE requests. The choice of server varies depending on the language or framework.

### Other demo components

The demo includes the following components:

* A [PostgreSQL](https://www.postgresql.org/+external) relational database to store the names of the audio clips
* A [Tigris bucket](https://www.tigrisdata.com/+external) to store the the audio files
* [Upstash for Redis](https://fly.io/docs/reference/redis/) and [WebSockets](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API+external) to handle the connections for the realtime requirement

## Available runtimes

Our deep dive demo comes in two flavors (so far):

- **Node.js** 
  - [node-dictaphone](https://github.com/fly-apps/node-dictaphone+external) GitHub repo
  - For details about implementation-specific files and app logic, see [Node.js deep dive demo](/docs/happy-path/nodejs/).
- **Rails**
  - [rails-dictaphone](https://github.com/fly-apps/rails-dictaphone+external) GitHub repo
  - For details about implementation-specific files and app logic, see [Rails deep dive demo](/docs/happy-path/rails/).

---

**Next:** [Launch the demo](../fire/)
