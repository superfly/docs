---
title: Run a Rails App
layout: framework_docs
order: 1
redirect_from: /docs/getting-started/rails/
---

<%= partial "docs/getting-started/partials/intro", locals: { runtime: "Rails" } %>

We'll take a look at the short versions first, deploying with a preconfigured example Rails app.
You can get the code for the example from [the Fly-Examples GitHub repository](https://github.com/fly-apps/hello-rails).
Just `git clone https://github.com/fly-apps/hello-rails` to get a local copy.

<%= partial "docs/getting-started/partials/install_flyctl_login" %>

## Provision Rails and Postgres Servers

To configure and launch the app, you can use `fly launch` and follow the wizard:

```cmd
fly launch
```
```output
Creating app in ~/Projects/hello-rails
Scanning source code
Detected a Rails app
? App Name (leave blank to use an auto-generated name): hello-rails
Automatically selected personal organization: John Smith
? Select region: sjc (San Jose, California (US))
Created app hello-rails in organization personal
Set secrets on hello-rails: RAILS_MASTER_KEY
Wrote config file fly.toml
? Would you like to setup a Postgresql database now? Yes
For pricing information visit: https://fly.io/docs/about/pricing/#postgresql-clusters
? Select configuration: Development - Single node, 1x shared CPU, 256MB RAM, 1GB disk
Creating postgres cluster hello-rails-db in organization personal
Postgres cluster hello-rails-db created
  Username:    postgres
  Password:    <redacted>
  Hostname:    hello-rails-db.internal
  Proxy Port:  5432
  PG Port: 5433
Save your credentials in a secure place, you won't be able to see them again!
```

You can set a name for the app, choose a default region, and choose to launch and attach a Postgresql database.
Finally `fly` will ask if you want to deploy. Say yes!

Once it's done, you can use `fly status` to check the app's status and deployment, and you should see something like this:

```cmd
fly status
```
```output
App
  Name     = hello-rails
  Owner    = personal
  Version  = 0
  Status   = running
  Hostname = hello-rails.fly.dev

Deployment Status
  ID          = c3ca80bf-4034-837a-ce92-682e6528c5c7
  Version     = v0
  Status      = successful
  Description = Deployment completed successfully
  Instances   = 1 desired, 1 placed, 1 healthy, 0 unhealthy

Instances
ID        PROCESS VERSION REGION  DESIRED STATUS  HEALTH CHECKS       RESTARTS  CREATED
748868bc  app     0       lhr     run     running 1 total, 1 passing  0         20s ago
```

If you elected to provision a Postgres database during setup, its deployed as a seperate Fly app to `hello-rails-db`.

<%= partial "docs/getting-started/partials/launched" %>

## Configuring an existing Rails application

If you've got an existing Rails app and you want to set it up for Fly, the process is pretty similar;
`fly launch` will take you through the setup steps, but there's a couple of things to look at first.

If you're using Postgres, your database settings will be passed to your app via a `DATABASE_URL` environment
variable (which Rails picks up automatically). That means you can drop a lot of the production configuration from `config/database.yml`.

If you've got your app's secrets stored in `config/credentials.yml.enc`, you'll need to provide the master
key to the app by setting it as an secret via the CLI, which you can do with:

```cmd
fly secrets set RAILS_MASTER_KEY=<key generated by bin/rails secret>
```

## Next steps

At this point you now have a basic Rails application running that points at a Postgres database, but most Rails applications need more then that like access to a Redis database for caching and background workers.

* [Sidekiq background workers](/docs/rails/the-basics/sidekiq)
* [Install Redis](/docs/reference/redis)
