---
title: "Persisting the Storage Folder"
layout: framework_docs
objective: Mount a volume to a re-initialized storage folder 
order: 7
---

The [storage folder](https://laravel.com/docs/9.x/filesystem#the-local-driver) by default, holds several "generated" essentials of your Laravel application. 

It's the default burrow for session, cache, and file data amongst others. If you'd opt to persist data on this folder, you'll have to mount a [volume](/docs/reference/volumes/) to it.


## The Steps

<%= partial "docs/laravel/partials/volume_storage_steps" %>

<b>On to the content of the Start Up script:</b>

```bash
FOLDER=/var/www/html/storage/app
if [ ! -d "$FOLDER" ]; then
    echo "$FOLDER is not a directory, copying storage_ content to storage"
    cp -r /var/www/html/storage_/. /var/www/html/storage
    echo "deleting storage_..."
    rm -rf /var/www/html/storage_
fi
```

<small>
So what happened above?
- The condition statement checks if the app folder does not exist in the volumized storage folder. If it does not exist, it copies over the contents of the storage_ folder to the volumized storage folder.
</small>
<br />
<br />

<b>Finally, deploy your Laravel Fly App!</b>

```cmd
fly deploy
```

#### **_Possible Errors_**

```output
Error not enough volumes named `<volume_name>` (1) to run `(<n>)` processes
```

The above error can come up after configuring your volume in `fly.toml` and executing `fly deploy`. 

It can mean that there are `<n>` processes configured in your `fly.toml` trying to use the volume!
Take note however, that a Volume can only be used by one at any given time. 

One way to fix this issue is to separate each process into [different Fly.io apps](/docs/app-guides/multiple-processes/#maybe-you-want-multiple-apps-though). Of course, separate application per process might require inter-communication between the applications. 

Fly.io applications can easily communicate with each other over a [private network](/docs/reference/private-networking/). Not only that, but Fly.io also offers the `fly-replay` [response header](/docs/reference/dynamic-request-routing/#the-fly-replay-response-header) which can be used to "redirect" request from one application to another, and return response from the correct application.
