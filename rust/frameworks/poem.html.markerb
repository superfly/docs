---
title: "Run a Poem App"
layout: framework_docs
objective: Poem is a full-featured and easy-to-use web framework with the Rust programming language.
sitemap: false
redirect_from:
 - /docs/languages-and-frameworks/poem/
 - /docs/getting-started/poem/
order: 5
---


<%= partial "/docs/languages-and-frameworks/partials/intro", locals: { runtime: "Poem", link: "https://docs.rs/poem/latest/poem/" } %>

Poem is a full-featured and easy-to-use web framework with the Rust programming language.

Deploying a Poem app on Fly.io is simple! With the help of the [cargo chef](https://github.com/LukeMathWalker/cargo-chef), we get great build times and small images.

## _Speedrun_

<%= partial "/docs/languages-and-frameworks/partials/flyctl" %>

<%= partial "/docs/rust/partials/speedrun", locals: { runtime: "poem" }  %>


## _Deploy a Poem App from scratch_

<%= partial "/docs/rust/partials/cargo-new", locals: { runtime: "poem" }  %>

Then we have to add some dependencies to the project:

```cmd
cargo add poem
cargo add tokio -F macros -F rt-multi-thread
```

Now, let's create a simple app in `src/main.rs`:

```rust
use poem::{get, handler, listener::TcpListener, Route, Server};

#[handler]
fn hello() -> String {
    format!("hello from fly.io!")
}

#[tokio::main]
async fn main() -> Result<(), std::io::Error> {
    let app = Route::new().at("/", get(hello));
    Server::new(TcpListener::bind("0.0.0.0:8080"))
        .run(app)
        .await
}
```

This will display a "Hello from fly.io!" message when you visit the root URL.
Take note that we serve the app on port `8080`.

We can confirm everything works fine by running `cargo run` and checking out `http://localhost:8080`.


<%= partial "/docs/rust/partials/deploy", locals: { runtime: "poem" }  %>
