---
title: "Run an Actix Web App"
layout: framework_docs
objective: Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust
sitemap: false
redirect_from:
 - /docs/languages-and-frameworks/actix-web/
 - /docs/getting-started/actix-web/
order: 2
---


<%= partial "/docs/languages-and-frameworks/partials/intro", locals: { runtime: "Actix Web", link: "https://actix.rs" } %>

Actix Web is a powerful, pragmatic, and extremely fast web framework for Rust

Deploying an Actix Web app on Fly.io is easy-peasy! With the help of the [cargo chef](https://github.com/LukeMathWalker/cargo-chef), we get great build times and small images.

## _Speedrun_

<%= partial "/docs/languages-and-frameworks/partials/flyctl" %>

<%= partial "/docs/rust/partials/speedrun", locals: { runtime: "actix-web" }  %>


## _Deploy an Actix Web App from scratch_

<%= partial "/docs/rust/partials/cargo-new", locals: { runtime: "actix-web" }  %>

Then we have to add the `actix-web` dependency to the project:

```cmd
cargo add actix-web
```

Now, let's create a simple app in `src/main.rs`:

```rust
use actix_web::{get, App, HttpServer, Responder};

#[get("/")]
async fn hello() -> impl Responder {
    format!("Hello from fly.io!")
}

#[actix_web::main] // or #[tokio::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new().service(hello)
    })
    .bind(("0.0.0.0", 8080))?
    .run()
    .await
}
```

This will display a "Hello from fly.io!" message when you visit the root URL.
Take note that we serve the app on port `8080`.

We can confirm everything works fine by running `cargo run` and checking out `http://localhost:8080`.


<%= partial "/docs/rust/partials/deploy", locals: { runtime: "actix-web" }  %>
