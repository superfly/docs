---
title: "Run a Deno App"
layout: language-and-framework-docs
sitemap: false
redirect_from: /docs/getting-started/deno/
---

<%= partial "partials/intro", locals: { runtime: "[Deno](https://deno.land)" } %>

## _The Hellodeno Application_

Our example will be a basic "hello world" example using Deno and [Dinatra](https://github.com/syumai/dinatra).

You can get the code for the example from [the hellodeno GitHub repository](https://github.com/fly-apps/hellodeno). Just `git clone https://github.com/fly-apps/hellodeno` to get a local copy. Here's all the code:

```typescript
import {
  app,
  get,
  post,
  redirect,
  contentType,
} from "https://denopkg.com/syumai/dinatra/mod.ts";

const greeting = "<h1>Hello From Deno on Fly!</h1>";

app(
  get("/", () => greeting),
  get("/:id", ({ params }) => greeting + `</br>and hello to ${params.id}`),
);
```

We'll call this file `main.ts`. We also want a `deps.ts` file for dependencies, here it is:

```typescript
export {
    app,
    get,
    post,
    redirect,
    contentType,
  } from "https://denopkg.com/syumai/dinatra/mod.ts";
```

There's nothing else to run. Deno will manage getting packages for itself.

## Running The Application

Run `deno run --allow-net main.ts` to start the application:

```cmd
deno run --allow-net main.ts
```
```output
listening on http://0.0.0.0:8080/
```

And connect to localhost:8080 to confirm that you have a working Deno application by receiving a greeting. Now to package it up for Fly.io. There are a number of ways to do this. You can use flyctl's own simple builder,

## Install Flyctl and Login

We are ready to start working with Fly.io, and that means we need `flyctl`, our CLI app for managing apps on Fly.io. If you've already installed it, carry on. If not, hop over to [our installation guide](/docs/getting-started/installing-flyctl/). Once thats installed you'll want to [log in to Fly.io](/docs/getting-started/log-in-to-fly/).

## Configuring the App for Fly.io

Each Fly App needs a `fly.toml` file to tell the system how we'd like to deploy it.
That file can be automatically generated with the command `flyctl launch` command. This command will also generate a Dockerfile for deployment.

```cmd
fly launch
```
```output
Creating app in /fly/guides/hellodeno
Scanning source code
Detected Deno app
? Select organization: myorg (myorg)
? Select region: ams (Amsterdam, Netherlands)
Created app empty-sea-2541 in organization myorg
Wrote config file fly.toml
Your app is ready. Deploy with `flyctl deploy`
? Would you like to deploy now? (y/N)
```

First you'll be prompted for an organization. Organizations are a way of sharing applications between Fly.io users. When you are asked to select an organization, there should be one with your account name; this is your personal organization. Select that.
Then, pick the region you want to deploy in.

## Inside `fly.toml`

The `fly.toml` file now contains a default configuration for deploying your app. In the process of creating that file, `flyctl` has also created a Fly-side application slot of the same name, "hellodeno". If we look at the `fly.toml` configuration file we can see the name in there:

```toml
app = "empty-sea-2541"

[processes]
  app = "run --allow-net ./example.ts"
...
```

We can also see a default `run` command for the main web process. We can change that to refer to `./main.ts`.

The `flyctl` command will always refer to this file in the current directory if it exists, specifically for the `app` name/value at the start. That name will be used to identify the application to the Fly.io platform.

The rest of the file contains settings to be applied to the application when it deploys.

## Deploying to Fly.io

We are now ready to deploy our containerized app to Fly.io. At the command line, just run:

```cmd
fly deploy
```

This will lookup our `fly.toml` file and get the app name `empty-sea-2541` from there.

Then `flyctl` will start the process of deploying our application to Fly.io using the Dockerfile. Flyctl will return you to the command line when it's done.

## Viewing the Deployed App

If you want to find out more about the deployment. The command `fly info` will give you all the essential details.

```cmd
fly info
```
```output
App
  Name     = empty-sea-2541
  Owner    = dj
  Version  = 0
  Status   = running
  Hostname = empty-sea-2541.fly.dev

Allocations
ID       VERSION REGION DESIRED STATUS  HEALTH CHECKS      RESTARTS CREATED
73f825ad 0       fra    run     running 1 total, 1 passing 0        6m34s ago
```

## _Connecting to the App_

The quickest way to view your application is to run `fly open` which will open your browser on the URL for your application. Run `fly open /name` to get an extra greeting from the app.

If you want to manually enter a URL to check, remember to replace `empty-sea-2541.fly.dev` with the hostname you got from `fly info` and connect to `http://hellodeno.fly.dev/` where you should find a greeting - it will normally be upgraded to a secure connection. Use `https://hellodeno.fly.dev` to start with a secure connection. Add `/name` and you'll get an extra greeting from the hellodeno application.

## Bonus Points

If you want to know what IP addresses the app is using, try `fly ips list`:

```cmd
fly ips list
```

```out
TYPE ADDRESS                              REGION CREATED AT
v4   213.188.199.2                        global 2021-04-22T23:23:01Z
v6   2a09:8280:1:2958:3b6c:fdfd:70f9:da9d        2021-04-22T23:23:01Z
```
## Arrived at Destination

You have successfully built, deployed, and connected to your first Deno application on Fly.io.


